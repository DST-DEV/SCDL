# Form implementation generated from reading ui file 'Main.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1166, 795)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.grid_left = QtWidgets.QGridLayout()
        self.grid_left.setObjectName("grid_left")
        self.tbl_left = QtWidgets.QTableWidget(parent=self.centralwidget)
        self.tbl_left.setObjectName("tbl_left")
        self.tbl_left.setColumnCount(0)
        self.tbl_left.setRowCount(0)
        self.grid_left.addWidget(self.tbl_left, 0, 0, 1, 2)
        self.btn_addrow_left = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_addrow_left.setObjectName("btn_addrow_left")
        self.grid_left.addWidget(self.btn_addrow_left, 1, 0, 1, 1)
        self.btn_save_left = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_save_left.setObjectName("btn_save_left")
        self.grid_left.addWidget(self.btn_save_left, 5, 0, 1, 1)
        self.line_tbl_left = QtWidgets.QFrame(parent=self.centralwidget)
        self.line_tbl_left.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line_tbl_left.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_tbl_left.setObjectName("line_tbl_left")
        self.grid_left.addWidget(self.line_tbl_left, 4, 0, 1, 2)
        self.btn_delrow_left = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_delrow_left.setObjectName("btn_delrow_left")
        self.grid_left.addWidget(self.btn_delrow_left, 1, 1, 1, 1)
        self.hLayout_tbl_sel_left = QtWidgets.QHBoxLayout()
        self.hLayout_tbl_sel_left.setObjectName("hLayout_tbl_sel_left")
        self.comboBox_tbl_left = QtWidgets.QComboBox(parent=self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_tbl_left.sizePolicy().hasHeightForWidth())
        self.comboBox_tbl_left.setSizePolicy(sizePolicy)
        self.comboBox_tbl_left.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.comboBox_tbl_left.setObjectName("comboBox_tbl_left")
        self.comboBox_tbl_left.addItem("")
        self.comboBox_tbl_left.addItem("")
        self.comboBox_tbl_left.addItem("")
        self.comboBox_tbl_left.addItem("")
        self.hLayout_tbl_sel_left.addWidget(self.comboBox_tbl_left)
        self.cb_red_view_tbl_left = QtWidgets.QCheckBox(parent=self.centralwidget)
        self.cb_red_view_tbl_left.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.cb_red_view_tbl_left.setChecked(True)
        self.cb_red_view_tbl_left.setObjectName("cb_red_view_tbl_left")
        self.hLayout_tbl_sel_left.addWidget(self.cb_red_view_tbl_left)
        self.hLayout_tbl_sel_left.setStretch(0, 10)
        self.hLayout_tbl_sel_left.setStretch(1, 1)
        self.grid_left.addLayout(self.hLayout_tbl_sel_left, 3, 0, 1, 2)
        self.btn_cancel_left = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_cancel_left.setObjectName("btn_cancel_left")
        self.grid_left.addWidget(self.btn_cancel_left, 5, 1, 1, 1)
        self.line_tbl_left_2 = QtWidgets.QFrame(parent=self.centralwidget)
        self.line_tbl_left_2.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line_tbl_left_2.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_tbl_left_2.setObjectName("line_tbl_left_2")
        self.grid_left.addWidget(self.line_tbl_left_2, 2, 0, 1, 2)
        self.gridLayout.addLayout(self.grid_left, 0, 0, 1, 1)
        self.grid_right = QtWidgets.QGridLayout()
        self.grid_right.setObjectName("grid_right")
        self.btn_delrow_right = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_delrow_right.setObjectName("btn_delrow_right")
        self.grid_right.addWidget(self.btn_delrow_right, 1, 1, 1, 1)
        self.btn_addrow_right = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_addrow_right.setObjectName("btn_addrow_right")
        self.grid_right.addWidget(self.btn_addrow_right, 1, 0, 1, 1)
        self.hLayout_tbl_sel_right = QtWidgets.QHBoxLayout()
        self.hLayout_tbl_sel_right.setObjectName("hLayout_tbl_sel_right")
        self.cb_red_view_tbl_right = QtWidgets.QCheckBox(parent=self.centralwidget)
        self.cb_red_view_tbl_right.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.cb_red_view_tbl_right.setChecked(True)
        self.cb_red_view_tbl_right.setObjectName("cb_red_view_tbl_right")
        self.hLayout_tbl_sel_right.addWidget(self.cb_red_view_tbl_right)
        self.comboBox_tbl_right = QtWidgets.QComboBox(parent=self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_tbl_right.sizePolicy().hasHeightForWidth())
        self.comboBox_tbl_right.setSizePolicy(sizePolicy)
        self.comboBox_tbl_right.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.comboBox_tbl_right.setMaxVisibleItems(12)
        self.comboBox_tbl_right.setObjectName("comboBox_tbl_right")
        self.comboBox_tbl_right.addItem("")
        self.comboBox_tbl_right.addItem("")
        self.comboBox_tbl_right.addItem("")
        self.comboBox_tbl_right.addItem("")
        self.hLayout_tbl_sel_right.addWidget(self.comboBox_tbl_right)
        self.hLayout_tbl_sel_right.setStretch(0, 1)
        self.hLayout_tbl_sel_right.setStretch(1, 10)
        self.grid_right.addLayout(self.hLayout_tbl_sel_right, 3, 0, 1, 2)
        self.tbl_right = QtWidgets.QTableWidget(parent=self.centralwidget)
        self.tbl_right.setObjectName("tbl_right")
        self.tbl_right.setColumnCount(0)
        self.tbl_right.setRowCount(0)
        self.grid_right.addWidget(self.tbl_right, 0, 0, 1, 2)
        self.btn_save_right = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_save_right.setObjectName("btn_save_right")
        self.grid_right.addWidget(self.btn_save_right, 5, 0, 1, 1)
        self.line_tbl_right = QtWidgets.QFrame(parent=self.centralwidget)
        self.line_tbl_right.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line_tbl_right.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_tbl_right.setObjectName("line_tbl_right")
        self.grid_right.addWidget(self.line_tbl_right, 4, 0, 1, 2)
        self.btn_cancel_right = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_cancel_right.setObjectName("btn_cancel_right")
        self.grid_right.addWidget(self.btn_cancel_right, 5, 1, 1, 1)
        self.line_tbl_right_2 = QtWidgets.QFrame(parent=self.centralwidget)
        self.line_tbl_right_2.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line_tbl_right_2.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_tbl_right_2.setObjectName("line_tbl_right_2")
        self.grid_right.addWidget(self.line_tbl_right_2, 2, 0, 1, 2)
        self.gridLayout.addLayout(self.grid_right, 0, 2, 1, 1)
        self.tabWidget = QtWidgets.QTabWidget(parent=self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        self.tabWidget.setMaximumSize(QtCore.QSize(270, 16777215))
        self.tabWidget.setToolTip("")
        self.tabWidget.setToolTipDuration(0)
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.TabPosition.North)
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        self.tabWidget.setObjectName("tabWidget")
        self.tab_scdl = QtWidgets.QWidget()
        self.tab_scdl.setObjectName("tab_scdl")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.tab_scdl)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.glayout_SCDL = QtWidgets.QGridLayout()
        self.glayout_SCDL.setObjectName("glayout_SCDL")
        self.glayout_dl_hist = QtWidgets.QGridLayout()
        self.glayout_dl_hist.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetDefaultConstraint)
        self.glayout_dl_hist.setObjectName("glayout_dl_hist")
        self.rbtn_new_pl = QtWidgets.QRadioButton(parent=self.tab_scdl)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.rbtn_new_pl.sizePolicy().hasHeightForWidth())
        self.rbtn_new_pl.setSizePolicy(sizePolicy)
        self.rbtn_new_pl.setChecked(False)
        self.rbtn_new_pl.setObjectName("rbtn_new_pl")
        self.BtnGroup_dl_hist = QtWidgets.QButtonGroup(MainWindow)
        self.BtnGroup_dl_hist.setObjectName("BtnGroup_dl_hist")
        self.BtnGroup_dl_hist.addButton(self.rbtn_new_pl)
        self.glayout_dl_hist.addWidget(self.rbtn_new_pl, 3, 1, 1, 1)
        self.rbtn_all_pl = QtWidgets.QRadioButton(parent=self.tab_scdl)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.rbtn_all_pl.sizePolicy().hasHeightForWidth())
        self.rbtn_all_pl.setSizePolicy(sizePolicy)
        self.rbtn_all_pl.setObjectName("rbtn_all_pl")
        self.BtnGroup_dl_hist.addButton(self.rbtn_all_pl)
        self.glayout_dl_hist.addWidget(self.rbtn_all_pl, 5, 1, 1, 1)
        self.rbtn_curr_pl = QtWidgets.QRadioButton(parent=self.tab_scdl)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.rbtn_curr_pl.sizePolicy().hasHeightForWidth())
        self.rbtn_curr_pl.setSizePolicy(sizePolicy)
        self.rbtn_curr_pl.setChecked(True)
        self.rbtn_curr_pl.setObjectName("rbtn_curr_pl")
        self.BtnGroup_dl_hist.addButton(self.rbtn_curr_pl)
        self.glayout_dl_hist.addWidget(self.rbtn_curr_pl, 4, 1, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.glayout_dl_hist.addItem(spacerItem, 6, 1, 1, 1)
        self.lbl_hist_up = QtWidgets.QLabel(parent=self.tab_scdl)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lbl_hist_up.sizePolicy().hasHeightForWidth())
        self.lbl_hist_up.setSizePolicy(sizePolicy)
        self.lbl_hist_up.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_hist_up.setObjectName("lbl_hist_up")
        self.glayout_dl_hist.addWidget(self.lbl_hist_up, 1, 0, 1, 3)
        self.btn_dl_hist_up = QtWidgets.QPushButton(parent=self.tab_scdl)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_dl_hist_up.sizePolicy().hasHeightForWidth())
        self.btn_dl_hist_up.setSizePolicy(sizePolicy)
        self.btn_dl_hist_up.setObjectName("btn_dl_hist_up")
        self.glayout_dl_hist.addWidget(self.btn_dl_hist_up, 2, 0, 1, 3)
        spacerItem1 = QtWidgets.QSpacerItem(5, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.glayout_dl_hist.addItem(spacerItem1, 3, 2, 3, 1)
        spacerItem2 = QtWidgets.QSpacerItem(5, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.glayout_dl_hist.addItem(spacerItem2, 3, 0, 3, 1)
        self.glayout_dl_hist.setColumnStretch(0, 1)
        self.glayout_dl_hist.setColumnStretch(1, 30)
        self.glayout_dl_hist.setColumnStretch(2, 1)
        self.glayout_SCDL.addLayout(self.glayout_dl_hist, 13, 0, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(20, 3, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.glayout_SCDL.addItem(spacerItem3, 4, 0, 1, 1)
        spacerItem4 = QtWidgets.QSpacerItem(20, 3, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.glayout_SCDL.addItem(spacerItem4, 10, 0, 1, 1)
        self.glayout_track_dl = QtWidgets.QGridLayout()
        self.glayout_track_dl.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetMinimumSize)
        self.glayout_track_dl.setObjectName("glayout_track_dl")
        self.lbl_track_dl = QtWidgets.QLabel(parent=self.tab_scdl)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lbl_track_dl.sizePolicy().hasHeightForWidth())
        self.lbl_track_dl.setSizePolicy(sizePolicy)
        self.lbl_track_dl.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_track_dl.setObjectName("lbl_track_dl")
        self.glayout_track_dl.addWidget(self.lbl_track_dl, 1, 0, 1, 1)
        self.btn_track_dl = QtWidgets.QPushButton(parent=self.tab_scdl)
        self.btn_track_dl.setObjectName("btn_track_dl")
        self.glayout_track_dl.addWidget(self.btn_track_dl, 2, 0, 1, 1)
        self.glayout_track_dl.setColumnStretch(0, 1)
        self.glayout_SCDL.addLayout(self.glayout_track_dl, 9, 0, 1, 1)
        self.glayout_pl_search = QtWidgets.QGridLayout()
        self.glayout_pl_search.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetMinimumSize)
        self.glayout_pl_search.setObjectName("glayout_pl_search")
        self.rbtn_pl_all = QtWidgets.QRadioButton(parent=self.tab_scdl)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.rbtn_pl_all.sizePolicy().hasHeightForWidth())
        self.rbtn_pl_all.setSizePolicy(sizePolicy)
        self.rbtn_pl_all.setChecked(True)
        self.rbtn_pl_all.setAutoExclusive(True)
        self.rbtn_pl_all.setObjectName("rbtn_pl_all")
        self.BtnGroup_extr_pl = QtWidgets.QButtonGroup(MainWindow)
        self.BtnGroup_extr_pl.setObjectName("BtnGroup_extr_pl")
        self.BtnGroup_extr_pl.addButton(self.rbtn_pl_all)
        self.glayout_pl_search.addWidget(self.rbtn_pl_all, 4, 1, 1, 1)
        self.rbtn_pl_search_name = QtWidgets.QRadioButton(parent=self.tab_scdl)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.rbtn_pl_search_name.sizePolicy().hasHeightForWidth())
        self.rbtn_pl_search_name.setSizePolicy(sizePolicy)
        self.rbtn_pl_search_name.setChecked(False)
        self.rbtn_pl_search_name.setObjectName("rbtn_pl_search_name")
        self.BtnGroup_extr_pl.addButton(self.rbtn_pl_search_name)
        self.glayout_pl_search.addWidget(self.rbtn_pl_search_name, 5, 1, 1, 1)
        self.rbtn_pl_search_key = QtWidgets.QRadioButton(parent=self.tab_scdl)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.rbtn_pl_search_key.sizePolicy().hasHeightForWidth())
        self.rbtn_pl_search_key.setSizePolicy(sizePolicy)
        self.rbtn_pl_search_key.setAutoExclusive(True)
        self.rbtn_pl_search_key.setObjectName("rbtn_pl_search_key")
        self.BtnGroup_extr_pl.addButton(self.rbtn_pl_search_key)
        self.glayout_pl_search.addWidget(self.rbtn_pl_search_key, 6, 1, 1, 1)
        self.lbl_pl_search = QtWidgets.QLabel(parent=self.tab_scdl)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lbl_pl_search.sizePolicy().hasHeightForWidth())
        self.lbl_pl_search.setSizePolicy(sizePolicy)
        self.lbl_pl_search.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_pl_search.setObjectName("lbl_pl_search")
        self.glayout_pl_search.addWidget(self.lbl_pl_search, 0, 0, 1, 3)
        self.cb_use_cached = QtWidgets.QCheckBox(parent=self.tab_scdl)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cb_use_cached.sizePolicy().hasHeightForWidth())
        self.cb_use_cached.setSizePolicy(sizePolicy)
        self.cb_use_cached.setChecked(True)
        self.cb_use_cached.setObjectName("cb_use_cached")
        self.glayout_pl_search.addWidget(self.cb_use_cached, 2, 1, 1, 1)
        self.TxtEdit_pl_search = QtWidgets.QPlainTextEdit(parent=self.tab_scdl)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.TxtEdit_pl_search.sizePolicy().hasHeightForWidth())
        self.TxtEdit_pl_search.setSizePolicy(sizePolicy)
        self.TxtEdit_pl_search.setMinimumSize(QtCore.QSize(0, 50))
        self.TxtEdit_pl_search.setMaximumSize(QtCore.QSize(16777215, 120))
        self.TxtEdit_pl_search.setObjectName("TxtEdit_pl_search")
        self.glayout_pl_search.addWidget(self.TxtEdit_pl_search, 7, 1, 1, 1)
        spacerItem5 = QtWidgets.QSpacerItem(20, 1, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.glayout_pl_search.addItem(spacerItem5, 8, 1, 1, 1)
        self.btn_pl_search = QtWidgets.QPushButton(parent=self.tab_scdl)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_pl_search.sizePolicy().hasHeightForWidth())
        self.btn_pl_search.setSizePolicy(sizePolicy)
        self.btn_pl_search.setObjectName("btn_pl_search")
        self.glayout_pl_search.addWidget(self.btn_pl_search, 1, 0, 1, 3)
        spacerItem6 = QtWidgets.QSpacerItem(5, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.glayout_pl_search.addItem(spacerItem6, 2, 0, 1, 1)
        spacerItem7 = QtWidgets.QSpacerItem(5, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.glayout_pl_search.addItem(spacerItem7, 2, 2, 1, 1)
        self.line_pl_search = QtWidgets.QFrame(parent=self.tab_scdl)
        self.line_pl_search.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line_pl_search.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_pl_search.setObjectName("line_pl_search")
        self.glayout_pl_search.addWidget(self.line_pl_search, 3, 0, 1, 3)
        self.glayout_pl_search.setColumnStretch(1, 1)
        self.glayout_pl_search.setRowStretch(0, 1)
        self.glayout_SCDL.addLayout(self.glayout_pl_search, 1, 0, 1, 1)
        self.line = QtWidgets.QFrame(parent=self.tab_scdl)
        self.line.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line.setObjectName("line")
        self.glayout_SCDL.addWidget(self.line, 3, 0, 1, 1)
        self.line_3 = QtWidgets.QFrame(parent=self.tab_scdl)
        self.line_3.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_3.setObjectName("line_3")
        self.glayout_SCDL.addWidget(self.line_3, 11, 0, 1, 1)
        self.glayout_track_ext = QtWidgets.QGridLayout()
        self.glayout_track_ext.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetMinimumSize)
        self.glayout_track_ext.setObjectName("glayout_track_ext")
        self.btn_track_ext = QtWidgets.QPushButton(parent=self.tab_scdl)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_track_ext.sizePolicy().hasHeightForWidth())
        self.btn_track_ext.setSizePolicy(sizePolicy)
        self.btn_track_ext.setObjectName("btn_track_ext")
        self.glayout_track_ext.addWidget(self.btn_track_ext, 1, 0, 1, 1)
        self.lbl_track_ext = QtWidgets.QLabel(parent=self.tab_scdl)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lbl_track_ext.sizePolicy().hasHeightForWidth())
        self.lbl_track_ext.setSizePolicy(sizePolicy)
        self.lbl_track_ext.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_track_ext.setObjectName("lbl_track_ext")
        self.glayout_track_ext.addWidget(self.lbl_track_ext, 0, 0, 1, 1)
        self.glayout_track_ext.setColumnStretch(0, 1)
        self.glayout_track_ext.setRowStretch(0, 10)
        self.glayout_SCDL.addLayout(self.glayout_track_ext, 5, 0, 1, 1)
        spacerItem8 = QtWidgets.QSpacerItem(20, 3, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.glayout_SCDL.addItem(spacerItem8, 6, 0, 1, 1)
        spacerItem9 = QtWidgets.QSpacerItem(20, 3, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.glayout_SCDL.addItem(spacerItem9, 12, 0, 1, 1)
        self.line_2 = QtWidgets.QFrame(parent=self.tab_scdl)
        self.line_2.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_2.setObjectName("line_2")
        self.glayout_SCDL.addWidget(self.line_2, 7, 0, 1, 1)
        spacerItem10 = QtWidgets.QSpacerItem(20, 3, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.glayout_SCDL.addItem(spacerItem10, 8, 0, 1, 1)
        spacerItem11 = QtWidgets.QSpacerItem(20, 3, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.glayout_SCDL.addItem(spacerItem11, 0, 0, 1, 1)
        spacerItem12 = QtWidgets.QSpacerItem(20, 3, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.glayout_SCDL.addItem(spacerItem12, 2, 0, 1, 1)
        self.verticalLayout_3.addLayout(self.glayout_SCDL)
        self.tabWidget.addTab(self.tab_scdl, "")
        self.tab_libman = QtWidgets.QWidget()
        self.tab_libman.setObjectName("tab_libman")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.tab_libman)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.gLayout_LibMan = QtWidgets.QGridLayout()
        self.gLayout_LibMan.setObjectName("gLayout_LibMan")
        self.line_libman1 = QtWidgets.QFrame(parent=self.tab_libman)
        self.line_libman1.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line_libman1.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_libman1.setObjectName("line_libman1")
        self.gLayout_LibMan.addWidget(self.line_libman1, 6, 0, 1, 1)
        spacerItem13 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gLayout_LibMan.addItem(spacerItem13, 0, 0, 1, 1)
        spacerItem14 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gLayout_LibMan.addItem(spacerItem14, 5, 0, 1, 1)
        self.gLayout_uni = QtWidgets.QGridLayout()
        self.gLayout_uni.setObjectName("gLayout_uni")
        self.rbtn_nf = QtWidgets.QRadioButton(parent=self.tab_libman)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.rbtn_nf.sizePolicy().hasHeightForWidth())
        self.rbtn_nf.setSizePolicy(sizePolicy)
        self.rbtn_nf.setChecked(True)
        self.rbtn_nf.setObjectName("rbtn_nf")
        self.BtnGroup_adj_files = QtWidgets.QButtonGroup(MainWindow)
        self.BtnGroup_adj_files.setObjectName("BtnGroup_adj_files")
        self.BtnGroup_adj_files.addButton(self.rbtn_nf)
        self.gLayout_uni.addWidget(self.rbtn_nf, 1, 1, 1, 1)
        spacerItem15 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gLayout_uni.addItem(spacerItem15, 0, 2, 2, 1)
        self.rbtn_lib = QtWidgets.QRadioButton(parent=self.tab_libman)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.rbtn_lib.sizePolicy().hasHeightForWidth())
        self.rbtn_lib.setSizePolicy(sizePolicy)
        self.rbtn_lib.setChecked(False)
        self.rbtn_lib.setObjectName("rbtn_lib")
        self.BtnGroup_adj_files.addButton(self.rbtn_lib)
        self.gLayout_uni.addWidget(self.rbtn_lib, 0, 1, 1, 1)
        spacerItem16 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gLayout_uni.addItem(spacerItem16, 0, 0, 2, 1)
        self.gLayout_LibMan.addLayout(self.gLayout_uni, 10, 0, 1, 1)
        self.lbl_read_dirs_1 = QtWidgets.QLabel(parent=self.tab_libman)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lbl_read_dirs_1.sizePolicy().hasHeightForWidth())
        self.lbl_read_dirs_1.setSizePolicy(sizePolicy)
        self.lbl_read_dirs_1.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_read_dirs_1.setObjectName("lbl_read_dirs_1")
        self.gLayout_LibMan.addWidget(self.lbl_read_dirs_1, 1, 0, 1, 1)
        self.lbl_file_uni = QtWidgets.QLabel(parent=self.tab_libman)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lbl_file_uni.sizePolicy().hasHeightForWidth())
        self.lbl_file_uni.setSizePolicy(sizePolicy)
        self.lbl_file_uni.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_file_uni.setObjectName("lbl_file_uni")
        self.gLayout_LibMan.addWidget(self.lbl_file_uni, 8, 0, 1, 1)
        self.lbl_music_sync = QtWidgets.QLabel(parent=self.tab_libman)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lbl_music_sync.sizePolicy().hasHeightForWidth())
        self.lbl_music_sync.setSizePolicy(sizePolicy)
        self.lbl_music_sync.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_music_sync.setObjectName("lbl_music_sync")
        self.gLayout_LibMan.addWidget(self.lbl_music_sync, 16, 0, 1, 1)
        self.btn_file_uni = QtWidgets.QPushButton(parent=self.tab_libman)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_file_uni.sizePolicy().hasHeightForWidth())
        self.btn_file_uni.setSizePolicy(sizePolicy)
        self.btn_file_uni.setObjectName("btn_file_uni")
        self.gLayout_LibMan.addWidget(self.btn_file_uni, 11, 0, 1, 1)
        self.btn_read_nf_1 = QtWidgets.QPushButton(parent=self.tab_libman)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_read_nf_1.sizePolicy().hasHeightForWidth())
        self.btn_read_nf_1.setSizePolicy(sizePolicy)
        self.btn_read_nf_1.setObjectName("btn_read_nf_1")
        self.gLayout_LibMan.addWidget(self.btn_read_nf_1, 3, 0, 1, 1)
        spacerItem17 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.gLayout_LibMan.addItem(spacerItem17, 18, 0, 1, 1)
        self.line_libman2 = QtWidgets.QFrame(parent=self.tab_libman)
        self.line_libman2.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line_libman2.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_libman2.setObjectName("line_libman2")
        self.gLayout_LibMan.addWidget(self.line_libman2, 14, 0, 1, 1)
        spacerItem18 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gLayout_LibMan.addItem(spacerItem18, 13, 0, 1, 1)
        self.lineEdit_nf_dir_1 = QtWidgets.QLineEdit(parent=self.tab_libman)
        self.lineEdit_nf_dir_1.setObjectName("lineEdit_nf_dir_1")
        self.gLayout_LibMan.addWidget(self.lineEdit_nf_dir_1, 4, 0, 1, 1)
        self.btn_sync_music = QtWidgets.QPushButton(parent=self.tab_libman)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_sync_music.sizePolicy().hasHeightForWidth())
        self.btn_sync_music.setSizePolicy(sizePolicy)
        self.btn_sync_music.setObjectName("btn_sync_music")
        self.gLayout_LibMan.addWidget(self.btn_sync_music, 17, 0, 1, 1)
        spacerItem19 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gLayout_LibMan.addItem(spacerItem19, 7, 0, 1, 1)
        self.btn_read_lib_1 = QtWidgets.QPushButton(parent=self.tab_libman)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_read_lib_1.sizePolicy().hasHeightForWidth())
        self.btn_read_lib_1.setSizePolicy(sizePolicy)
        self.btn_read_lib_1.setObjectName("btn_read_lib_1")
        self.gLayout_LibMan.addWidget(self.btn_read_lib_1, 2, 0, 1, 1)
        spacerItem20 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gLayout_LibMan.addItem(spacerItem20, 15, 0, 1, 1)
        self.gridLayout_adjustfiles = QtWidgets.QGridLayout()
        self.gridLayout_adjustfiles.setObjectName("gridLayout_adjustfiles")
        spacerItem21 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_adjustfiles.addItem(spacerItem21, 0, 0, 4, 1)
        self.cb_samplerate = QtWidgets.QCheckBox(parent=self.tab_libman)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cb_samplerate.sizePolicy().hasHeightForWidth())
        self.cb_samplerate.setSizePolicy(sizePolicy)
        self.cb_samplerate.setChecked(True)
        self.cb_samplerate.setObjectName("cb_samplerate")
        self.gridLayout_adjustfiles.addWidget(self.cb_samplerate, 3, 1, 1, 1)
        self.cb_metadata = QtWidgets.QCheckBox(parent=self.tab_libman)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cb_metadata.sizePolicy().hasHeightForWidth())
        self.cb_metadata.setSizePolicy(sizePolicy)
        self.cb_metadata.setChecked(True)
        self.cb_metadata.setObjectName("cb_metadata")
        self.gridLayout_adjustfiles.addWidget(self.cb_metadata, 1, 1, 1, 1)
        self.cb_fnames = QtWidgets.QCheckBox(parent=self.tab_libman)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cb_fnames.sizePolicy().hasHeightForWidth())
        self.cb_fnames.setSizePolicy(sizePolicy)
        self.cb_fnames.setChecked(True)
        self.cb_fnames.setObjectName("cb_fnames")
        self.gridLayout_adjustfiles.addWidget(self.cb_fnames, 0, 1, 1, 1)
        spacerItem22 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_adjustfiles.addItem(spacerItem22, 0, 2, 4, 1)
        self.cb_genre = QtWidgets.QCheckBox(parent=self.tab_libman)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cb_genre.sizePolicy().hasHeightForWidth())
        self.cb_genre.setSizePolicy(sizePolicy)
        self.cb_genre.setChecked(True)
        self.cb_genre.setObjectName("cb_genre")
        self.gridLayout_adjustfiles.addWidget(self.cb_genre, 2, 1, 1, 1)
        self.gridLayout_adjustfiles.setRowMinimumHeight(0, 10)
        self.gridLayout_adjustfiles.setRowMinimumHeight(1, 10)
        self.gridLayout_adjustfiles.setRowMinimumHeight(2, 10)
        self.gridLayout_adjustfiles.setRowMinimumHeight(3, 10)
        self.gLayout_LibMan.addLayout(self.gridLayout_adjustfiles, 12, 0, 1, 1)
        self.verticalLayout_2.addLayout(self.gLayout_LibMan)
        self.tabWidget.addTab(self.tab_libman, "")
        self.tab_libup = QtWidgets.QWidget()
        self.tab_libup.setObjectName("tab_libup")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.tab_libup)
        self.verticalLayout.setObjectName("verticalLayout")
        self.gLayout_LibUp = QtWidgets.QGridLayout()
        self.gLayout_LibUp.setObjectName("gLayout_LibUp")
        self.btn_reset_goalfld = QtWidgets.QPushButton(parent=self.tab_libup)
        self.btn_reset_goalfld.setObjectName("btn_reset_goalfld")
        self.gLayout_LibUp.addWidget(self.btn_reset_goalfld, 11, 0, 1, 1)
        self.lbl_read_dirs_2 = QtWidgets.QLabel(parent=self.tab_libup)
        self.lbl_read_dirs_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_read_dirs_2.setObjectName("lbl_read_dirs_2")
        self.gLayout_LibUp.addWidget(self.lbl_read_dirs_2, 1, 0, 1, 1)
        spacerItem23 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gLayout_LibUp.addItem(spacerItem23, 5, 0, 1, 1)
        self.btn_move_files = QtWidgets.QPushButton(parent=self.tab_libup)
        self.btn_move_files.setObjectName("btn_move_files")
        self.gLayout_LibUp.addWidget(self.btn_move_files, 18, 0, 1, 1)
        self.btn_read_nf_2 = QtWidgets.QPushButton(parent=self.tab_libup)
        self.btn_read_nf_2.setObjectName("btn_read_nf_2")
        self.gLayout_LibUp.addWidget(self.btn_read_nf_2, 3, 0, 1, 1)
        self.lineEdit_nf_dir_2 = QtWidgets.QLineEdit(parent=self.tab_libup)
        self.lineEdit_nf_dir_2.setObjectName("lineEdit_nf_dir_2")
        self.gLayout_LibUp.addWidget(self.lineEdit_nf_dir_2, 4, 0, 1, 1)
        spacerItem24 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gLayout_LibUp.addItem(spacerItem24, 0, 0, 1, 1)
        spacerItem25 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.MinimumExpanding)
        self.gLayout_LibUp.addItem(spacerItem25, 20, 0, 1, 1)
        self.btn_del_ex_files = QtWidgets.QPushButton(parent=self.tab_libup)
        self.btn_del_ex_files.setObjectName("btn_del_ex_files")
        self.gLayout_LibUp.addWidget(self.btn_del_ex_files, 13, 0, 1, 1)
        self.lbl_lib_update = QtWidgets.QLabel(parent=self.tab_libup)
        self.lbl_lib_update.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_lib_update.setObjectName("lbl_lib_update")
        self.gLayout_LibUp.addWidget(self.lbl_lib_update, 8, 0, 1, 1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem26 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout.addItem(spacerItem26)
        self.cb_repl_ex_files = QtWidgets.QCheckBox(parent=self.tab_libup)
        self.cb_repl_ex_files.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.cb_repl_ex_files.setObjectName("cb_repl_ex_files")
        self.horizontalLayout.addWidget(self.cb_repl_ex_files)
        spacerItem27 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout.addItem(spacerItem27)
        self.horizontalLayout.setStretch(0, 1)
        self.horizontalLayout.setStretch(1, 30)
        self.horizontalLayout.setStretch(2, 1)
        self.gLayout_LibUp.addLayout(self.horizontalLayout, 19, 0, 1, 1)
        spacerItem28 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gLayout_LibUp.addItem(spacerItem28, 7, 0, 1, 1)
        self.line_libup2 = QtWidgets.QFrame(parent=self.tab_libup)
        self.line_libup2.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line_libup2.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_libup2.setObjectName("line_libup2")
        self.gLayout_LibUp.addWidget(self.line_libup2, 15, 0, 1, 1)
        self.gLayout_move = QtWidgets.QGridLayout()
        self.gLayout_move.setObjectName("gLayout_move")
        spacerItem29 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gLayout_move.addItem(spacerItem29, 0, 0, 2, 1)
        self.rbtn_search = QtWidgets.QRadioButton(parent=self.tab_libup)
        self.rbtn_search.setChecked(False)
        self.rbtn_search.setObjectName("rbtn_search")
        self.BtnGroup_goal_fld = QtWidgets.QButtonGroup(MainWindow)
        self.BtnGroup_goal_fld.setObjectName("BtnGroup_goal_fld")
        self.BtnGroup_goal_fld.addButton(self.rbtn_search)
        self.gLayout_move.addWidget(self.rbtn_search, 1, 1, 1, 1)
        self.rbtn_meta = QtWidgets.QRadioButton(parent=self.tab_libup)
        self.rbtn_meta.setChecked(True)
        self.rbtn_meta.setObjectName("rbtn_meta")
        self.BtnGroup_goal_fld.addButton(self.rbtn_meta)
        self.gLayout_move.addWidget(self.rbtn_meta, 0, 1, 1, 1)
        spacerItem30 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gLayout_move.addItem(spacerItem30, 0, 2, 2, 1)
        self.gLayout_move.setColumnStretch(0, 1)
        self.gLayout_move.setColumnStretch(1, 30)
        self.gLayout_move.setColumnStretch(2, 1)
        self.gLayout_LibUp.addLayout(self.gLayout_move, 10, 0, 1, 1)
        self.btn_read_lib_2 = QtWidgets.QPushButton(parent=self.tab_libup)
        self.btn_read_lib_2.setObjectName("btn_read_lib_2")
        self.gLayout_LibUp.addWidget(self.btn_read_lib_2, 2, 0, 1, 1)
        self.btn_goalfld_search = QtWidgets.QPushButton(parent=self.tab_libup)
        self.btn_goalfld_search.setObjectName("btn_goalfld_search")
        self.gLayout_LibUp.addWidget(self.btn_goalfld_search, 9, 0, 1, 1)
        self.line_libup1 = QtWidgets.QFrame(parent=self.tab_libup)
        self.line_libup1.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line_libup1.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_libup1.setObjectName("line_libup1")
        self.gLayout_LibUp.addWidget(self.line_libup1, 6, 0, 1, 1)
        self.line_4 = QtWidgets.QFrame(parent=self.tab_libup)
        self.line_4.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_4.setObjectName("line_4")
        self.gLayout_LibUp.addWidget(self.line_4, 12, 0, 1, 1)
        self.gLayout_deldoub = QtWidgets.QGridLayout()
        self.gLayout_deldoub.setObjectName("gLayout_deldoub")
        self.rbtn_deldoub_lib = QtWidgets.QRadioButton(parent=self.tab_libup)
        self.rbtn_deldoub_lib.setChecked(False)
        self.rbtn_deldoub_lib.setObjectName("rbtn_deldoub_lib")
        self.BtnGroup_del_doubles = QtWidgets.QButtonGroup(MainWindow)
        self.BtnGroup_del_doubles.setObjectName("BtnGroup_del_doubles")
        self.BtnGroup_del_doubles.addButton(self.rbtn_deldoub_lib)
        self.gLayout_deldoub.addWidget(self.rbtn_deldoub_lib, 0, 1, 1, 1)
        self.rbtn_deldoub_nf = QtWidgets.QRadioButton(parent=self.tab_libup)
        self.rbtn_deldoub_nf.setChecked(True)
        self.rbtn_deldoub_nf.setObjectName("rbtn_deldoub_nf")
        self.BtnGroup_del_doubles.addButton(self.rbtn_deldoub_nf)
        self.gLayout_deldoub.addWidget(self.rbtn_deldoub_nf, 1, 1, 1, 1)
        self.rbtn_deldoub_indiv = QtWidgets.QRadioButton(parent=self.tab_libup)
        self.rbtn_deldoub_indiv.setChecked(False)
        self.rbtn_deldoub_indiv.setObjectName("rbtn_deldoub_indiv")
        self.BtnGroup_del_doubles.addButton(self.rbtn_deldoub_indiv)
        self.gLayout_deldoub.addWidget(self.rbtn_deldoub_indiv, 2, 1, 1, 1)
        spacerItem31 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gLayout_deldoub.addItem(spacerItem31, 0, 0, 3, 1)
        spacerItem32 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gLayout_deldoub.addItem(spacerItem32, 0, 2, 3, 1)
        self.gLayout_deldoub.setColumnStretch(0, 1)
        self.gLayout_deldoub.setColumnStretch(1, 30)
        self.gLayout_deldoub.setColumnStretch(2, 1)
        self.gLayout_LibUp.addLayout(self.gLayout_deldoub, 14, 0, 1, 1)
        self.verticalLayout.addLayout(self.gLayout_LibUp)
        self.tabWidget.addTab(self.tab_libup, "")
        self.gridLayout.addWidget(self.tabWidget, 0, 1, 1, 1)
        self.glayout_msg = QtWidgets.QGridLayout()
        self.glayout_msg.setObjectName("glayout_msg")
        self.lbl_msg = QtWidgets.QLabel(parent=self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lbl_msg.sizePolicy().hasHeightForWidth())
        self.lbl_msg.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lbl_msg.setFont(font)
        self.lbl_msg.setObjectName("lbl_msg")
        self.glayout_msg.addWidget(self.lbl_msg, 0, 0, 1, 1)
        self.progressBar = QtWidgets.QProgressBar(parent=self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.progressBar.sizePolicy().hasHeightForWidth())
        self.progressBar.setSizePolicy(sizePolicy)
        self.progressBar.setMinimumSize(QtCore.QSize(0, 15))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setTextVisible(False)
        self.progressBar.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.progressBar.setTextDirection(QtWidgets.QProgressBar.Direction.TopToBottom)
        self.progressBar.setObjectName("progressBar")
        self.glayout_msg.addWidget(self.progressBar, 2, 0, 1, 1)
        self.txtedit_messages = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.txtedit_messages.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.txtedit_messages.sizePolicy().hasHeightForWidth())
        self.txtedit_messages.setSizePolicy(sizePolicy)
        self.txtedit_messages.setMinimumSize(QtCore.QSize(0, 70))
        self.txtedit_messages.setMaximumSize(QtCore.QSize(16777215, 150))
        self.txtedit_messages.setSizeIncrement(QtCore.QSize(0, 0))
        self.txtedit_messages.setReadOnly(True)
        self.txtedit_messages.setObjectName("txtedit_messages")
        self.glayout_msg.addWidget(self.txtedit_messages, 1, 0, 1, 1)
        self.glayout_msg.setColumnStretch(0, 1)
        self.glayout_msg.setRowStretch(0, 1)
        self.glayout_msg.setRowStretch(1, 100)
        self.glayout_msg.setRowStretch(2, 1)
        self.gridLayout.addLayout(self.glayout_msg, 1, 0, 1, 3)
        self.gridLayout.setColumnStretch(0, 5)
        self.gridLayout.setColumnStretch(1, 3)
        self.gridLayout.setColumnStretch(2, 5)
        self.gridLayout.setRowStretch(0, 10)
        self.gridLayout.setRowStretch(1, 3)
        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1166, 22))
        self.menubar.setObjectName("menubar")
        self.menuSettings = QtWidgets.QMenu(parent=self.menubar)
        self.menuSettings.setObjectName("menuSettings")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionrfsey = QtGui.QAction(parent=MainWindow)
        self.actionrfsey.setObjectName("actionrfsey")
        self.SettingsImport = QtGui.QAction(parent=MainWindow)
        self.SettingsImport.setObjectName("SettingsImport")
        self.SettingsChange = QtGui.QAction(parent=MainWindow)
        self.SettingsChange.setObjectName("SettingsChange")
        self.actionEdit_Download_History = QtGui.QAction(parent=MainWindow)
        self.actionEdit_Download_History.setObjectName("actionEdit_Download_History")
        self.EditHist = QtGui.QAction(parent=MainWindow)
        self.EditHist.setObjectName("EditHist")
        self.menuSettings.addAction(self.SettingsImport)
        self.menuSettings.addAction(self.SettingsChange)
        self.menuSettings.addSeparator()
        self.menuSettings.addAction(self.EditHist)
        self.menubar.addAction(self.menuSettings.menuAction())

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(2)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.btn_addrow_left.setText(_translate("MainWindow", "Add row"))
        self.btn_save_left.setToolTip(_translate("MainWindow", "<html><head/><body><p>Save the currently displayed table to the internal dataset.</p><p><span style=\" font-style:italic;\">Note</span>: Changes in the tables are not considered in the features of the program unless they are saved.</p></body></html>"))
        self.btn_save_left.setText(_translate("MainWindow", "Save"))
        self.btn_delrow_left.setText(_translate("MainWindow", "Delete current row"))
        self.comboBox_tbl_left.setItemText(0, _translate("MainWindow", "Soundcloud Playlists"))
        self.comboBox_tbl_left.setItemText(1, _translate("MainWindow", "Soundcloud Tracks"))
        self.comboBox_tbl_left.setItemText(2, _translate("MainWindow", "Library Files"))
        self.comboBox_tbl_left.setItemText(3, _translate("MainWindow", "New Files"))
        self.cb_red_view_tbl_left.setToolTip(_translate("MainWindow", "<html><head/><body><p>In the reduced view, only the most important columns are displayed to keep the table manageable</p></body></html>"))
        self.cb_red_view_tbl_left.setText(_translate("MainWindow", "Reduced view"))
        self.btn_cancel_left.setToolTip(_translate("MainWindow", "<html><head/><body><p>Discard changes to the current table and load the last saved version.</p></body></html>"))
        self.btn_cancel_left.setText(_translate("MainWindow", "Cancel"))
        self.btn_delrow_right.setText(_translate("MainWindow", "Delete current row"))
        self.btn_addrow_right.setText(_translate("MainWindow", "Add row"))
        self.cb_red_view_tbl_right.setToolTip(_translate("MainWindow", "<html><head/><body><p>In the reduced view, only the most important columns are displayed to keep the table manageable</p></body></html>"))
        self.cb_red_view_tbl_right.setText(_translate("MainWindow", "Reduced view"))
        self.comboBox_tbl_right.setCurrentText(_translate("MainWindow", "Soundcloud Playlists"))
        self.comboBox_tbl_right.setItemText(0, _translate("MainWindow", "Soundcloud Playlists"))
        self.comboBox_tbl_right.setItemText(1, _translate("MainWindow", "Soundcloud Tracks"))
        self.comboBox_tbl_right.setItemText(2, _translate("MainWindow", "Library Files"))
        self.comboBox_tbl_right.setItemText(3, _translate("MainWindow", "New Files"))
        self.btn_save_right.setToolTip(_translate("MainWindow", "<html><head/><body><p>Save the currently displayed table to the internal dataset.</p><p><span style=\" font-style:italic;\">Note</span>: Changes in the tables are not considered in the features of the program unless they are saved.</p></body></html>"))
        self.btn_save_right.setText(_translate("MainWindow", "Save"))
        self.btn_cancel_right.setToolTip(_translate("MainWindow", "Discard changes to the current table and load the last saved version."))
        self.btn_cancel_right.setText(_translate("MainWindow", "Cancel"))
        self.tab_scdl.setToolTip(_translate("MainWindow", "Soundcloud Downloader"))
        self.rbtn_new_pl.setToolTip(_translate("MainWindow", "<html><head/><body><p>Only consider the playlists which aren\'t yet in the download history dataset</p><p><span style=\" font-style:italic;\">Note:</span> This option reextracts the soundcloud playlists from the soundcloud profile </p></body></html>"))
        self.rbtn_new_pl.setText(_translate("MainWindow", "New playlists"))
        self.rbtn_all_pl.setToolTip(_translate("MainWindow", "<html><head/><body><p>Update all playlists from the soundcloud profile</p><p><span style=\" font-style:italic;\">Note:</span> This option <span style=\" font-weight:700;\">overwrites</span> the current information in the dataset. Be careful when using it.</p><p><span style=\" font-style:italic;\">Note:</span> This option reextracts the soundcloud playlists from the soundcloud profile </p></body></html>"))
        self.rbtn_all_pl.setText(_translate("MainWindow", "All playlists"))
        self.rbtn_curr_pl.setToolTip(_translate("MainWindow", "<html><head/><body><p>Only consider the playlists which are currently loaded in the Soundcloud Playlists table.</p><p><span style=\" font-style:italic;\">Note:</span> This option <span style=\" font-weight:700;\">overwrites</span> the current information in the dataset. Be careful when using it.</p></body></html>"))
        self.rbtn_curr_pl.setText(_translate("MainWindow", "Current playlists"))
        self.lbl_hist_up.setText(_translate("MainWindow", "DL History Updater"))
        self.btn_dl_hist_up.setToolTip(_translate("MainWindow", "<html><head/><body><p>Updates the download history to match the last track of the playlists.</p><p>Which playlists are affected by this feature can be selected with the buttons below.</p></body></html>"))
        self.btn_dl_hist_up.setText(_translate("MainWindow", "Update DL history"))
        self.lbl_track_dl.setText(_translate("MainWindow", "Track Downloader"))
        self.btn_track_dl.setToolTip(_translate("MainWindow", "<html><head/><body><p>Download all found tracks(cf. &quot;Soundcloud Tracks&quot; in the table dropdown)</p><p><span style=\" font-style:italic;\">Note:</span> Single Tracks can be excluded for this feature by unchecking the checkbox in the &quot;include&quot; column in the Soundcloud Tracks table (remember to save the table!)</p></body></html>"))
        self.btn_track_dl.setText(_translate("MainWindow", "Download Tracks"))
        self.rbtn_pl_all.setToolTip(_translate("MainWindow", "<html><head/><body><p>Extract all playlists from the soundcloud profile (No filtering)</p></body></html>"))
        self.rbtn_pl_all.setText(_translate("MainWindow", "Find all Playlists"))
        self.rbtn_pl_search_name.setToolTip(_translate("MainWindow", "<html><head/><body><p>Extract only the playlist, which exactly matches the name entered in the text field below</p></body></html>"))
        self.rbtn_pl_search_name.setText(_translate("MainWindow", "Specify Playlists via Name"))
        self.rbtn_pl_search_key.setToolTip(_translate("MainWindow", "<html><head/><body><p>Extract only the playlists which contain all of the keywords listed in the textfield below (logical and).</p><p><span style=\" font-style:italic;\">Note</span>: Filtering is not case sensitive. Furthermore, keywords can also be single letters or only part of words</p></body></html>"))
        self.rbtn_pl_search_key.setText(_translate("MainWindow", "Specify Name Keywords"))
        self.lbl_pl_search.setText(_translate("MainWindow", "Playlist Search Engine"))
        self.cb_use_cached.setToolTip(_translate("MainWindow", "<html><head/><body><p>Use the found playlists from the last time the playlists were extracted from Soundcloud.</p><p><span style=\" font-style:italic;\">Note: </span>This is specific to the soundcloud account</p></body></html>"))
        self.cb_use_cached.setText(_translate("MainWindow", "Use cached playlists"))
        self.TxtEdit_pl_search.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:700;\">For mode &quot;Specify Playlists via Name&quot;: </span></p><p>Search name</p><p><span style=\" font-weight:700;\">For mode &quot;Specifiy Name Keywords&quot;: </span></p><p>Comma separated keywords</p><p>E.g. the input:</p><p><span style=\" font-style:italic;\">Tra, boun</span></p><p>would filter for all playlists containing &quot;Tra&quot; and &quot;boun&quot;, which could for example return all bouncy trance playlists (depending on the playlist names of the user)</p></body></html>"))
        self.TxtEdit_pl_search.setPlaceholderText(_translate("MainWindow", "Enter playlist names / search keywords"))
        self.btn_pl_search.setToolTip(_translate("MainWindow", "Find playlists matchin the search criteria specified below"))
        self.btn_pl_search.setText(_translate("MainWindow", "Find Playlists"))
        self.btn_track_ext.setToolTip(_translate("MainWindow", "<html><head/><body><p>Extract all new tracks from the playlists displayed in the found soundcloud playlists (cf. &quot;Soundcloud Playlists&quot; in the table dropdown)</p><p><span style=\" font-style:italic;\">Note:</span> Single playlists can be excluded for this feature by unchecking the checkbox in the &quot;include&quot; column in the Soundcloud Playlists table (remember to save the table!)</p><p><span style=\" font-style:italic;\">Note:</span> Which tracks are new is determined based on the DL History from previous program runs. If this data is incorrect, it can be updated in the DL History Updater section or manually edited (in the toolbar under settings)</p></body></html>"))
        self.btn_track_ext.setText(_translate("MainWindow", "Extract Tracks"))
        self.lbl_track_ext.setText(_translate("MainWindow", "Track Extractor"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_scdl), _translate("MainWindow", "SCDL"))
        self.tab_libman.setToolTip(_translate("MainWindow", "<html><head/><body><p>File Adjuster for new files or library files</p></body></html>"))
        self.rbtn_nf.setToolTip(_translate("MainWindow", "Apply the adjustments to the found new files"))
        self.rbtn_nf.setText(_translate("MainWindow", "New files"))
        self.rbtn_lib.setToolTip(_translate("MainWindow", "Apply the adjustments to the found files from the track library"))
        self.rbtn_lib.setText(_translate("MainWindow", "Library"))
        self.lbl_read_dirs_1.setText(_translate("MainWindow", "Inputs"))
        self.lbl_file_uni.setText(_translate("MainWindow", "File Manager"))
        self.lbl_music_sync.setText(_translate("MainWindow", "Music Sync"))
        self.btn_file_uni.setToolTip(_translate("MainWindow", "<html><head/><body><p>Adjust the files from either the track library or the new files directory. Individual adjustments can be turned on/off via the checkboxes below</p></body></html>"))
        self.btn_file_uni.setText(_translate("MainWindow", "Adjust files"))
        self.btn_read_nf_1.setToolTip(_translate("MainWindow", "<html><head/><body><p>Read the files from the new files directory</p><p><span style=\" font-style:italic;\">Note: </span>The new files directory can temporarily be overwritten by the input in the text field below</p></body></html>"))
        self.btn_read_nf_1.setText(_translate("MainWindow", "Read new files"))
        self.lineEdit_nf_dir_1.setToolTip(_translate("MainWindow", "Folder path of the new files folder to temporarily overwrite the file path specified in the settings"))
        self.lineEdit_nf_dir_1.setPlaceholderText(_translate("MainWindow", "C:/Users/davis/Downloads/SC DL"))
        self.btn_sync_music.setToolTip(_translate("MainWindow", "<html><head/><body><p>Copy all .mp3 files from the track library to the music directory.</p><p><span style=\" font-style:italic;\">Note: </span>This feature is intended as a way to sync the track library to your phone without blowing up the storage due to the large file sizes of .wav and .aiff files</p></body></html>"))
        self.btn_sync_music.setText(_translate("MainWindow", "Sync .mp3 files"))
        self.btn_read_lib_1.setToolTip(_translate("MainWindow", "Read the files from the track library (excluding files from the excluded folders)"))
        self.btn_read_lib_1.setText(_translate("MainWindow", "Read library"))
        self.cb_samplerate.setToolTip(_translate("MainWindow", "<html><head/><body><p>Assert whether the bit rate is ≤ 48000 Hz and bit depth is 16 bit. If one of these values is exceeded, the file is converted to 44110 Hz / 48000 Hz and 16 bit</p></body></html>"))
        self.cb_samplerate.setText(_translate("MainWindow", "Check sample rate"))
        self.cb_metadata.setToolTip(_translate("MainWindow", "<html><head/><body><p>Insert the artist name(-s) and title into the metadata.</p><p><span style=\" font-style:italic;\">Note: </span>The artist and title are extracted from the filename, which for this feature to work properly needs to be in the format <span style=\" font-style:italic;\">&lt;artist&gt; - &lt;title&gt;</span></p></body></html>"))
        self.cb_metadata.setText(_translate("MainWindow", "Insert Artist and Title"))
        self.cb_fnames.setToolTip(_translate("MainWindow", "<html><head/><body><p>Unify the filenames to fit the format <span style=\" font-style:italic;\">&lt;Artist&gt; - &lt;Title&gt;</span></p><p><span style=\" font-style:italic;\">For the interested reader: </span>This feature does the following:</p><p>- Remove common obsolete strings such as &quot;premiere&quot; or &quot;free DL&quot;</p><p>- Remove content within square brackets (except for if they contain the words &quot;Remix&quot;, &quot;Edit&quot; or &quot;Mashup&quot; or &quot;Bootleg&quot;)</p><p>- Remove round brackets which contain the words &quot;ft&quot;, &quot;prod&quot;, &quot;feat&quot; or &quot;records&quot;</p><p>- Converts the string to title format</p></body></html>"))
        self.cb_fnames.setText(_translate("MainWindow", "Adjust file names"))
        self.cb_genre.setToolTip(_translate("MainWindow", "<html><head/><body><p>Insert the genre into the metadata. The genre is assumed to be the name of the current <span style=\" font-style:italic;\">parent directory</span></p></body></html>"))
        self.cb_genre.setText(_translate("MainWindow", "Insert Genre"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_libman), _translate("MainWindow", "Lib Manager"))
        self.tab_libup.setToolTip(_translate("MainWindow", "<html><head/><body><p>Library file updater</p></body></html>"))
        self.btn_reset_goalfld.setToolTip(_translate("MainWindow", "<html><head/><body><p>Resets the found destination location</p></body></html>"))
        self.btn_reset_goalfld.setText(_translate("MainWindow", "Reset goal folder"))
        self.lbl_read_dirs_2.setText(_translate("MainWindow", "Inputs"))
        self.btn_move_files.setToolTip(_translate("MainWindow", "<html><head/><body><p>Move the new files to the determined destination location.</p><p><span style=\" font-style:italic;\">Note</span>: For safety, files in the library are only replaced if the checkbox below is ticked on</p></body></html>"))
        self.btn_move_files.setText(_translate("MainWindow", "Move files"))
        self.btn_read_nf_2.setToolTip(_translate("MainWindow", "<html><head/><body><p>Read the files from the new files directory</p><p><span style=\" font-style:italic;\">Note: </span>The new files directory can temporarily be overwritten by the input in the text field below</p></body></html>"))
        self.btn_read_nf_2.setText(_translate("MainWindow", "Read new files"))
        self.lineEdit_nf_dir_2.setToolTip(_translate("MainWindow", "Folder path of the new files folder to temporarily overwrite the file path specified in the settings"))
        self.lineEdit_nf_dir_2.setPlaceholderText(_translate("MainWindow", "C:/Users/davis/Downloads/SC DL"))
        self.btn_del_ex_files.setToolTip(_translate("MainWindow", "<html><head/><body><p>Deletes files in the library which are also in the new files. </p><p><span style=\" font-style:italic;\">Note:</span> This feature requires the &quot;Search filename in Library&quot; mode to be used for the determination of the destination location.</p><p>The purpose of this feature is to delete tracks that might exist in a different genre than the current new files are planned to be sorted into.</p></body></html>"))
        self.btn_del_ex_files.setText(_translate("MainWindow", "Delete duplicate files "))
        self.lbl_lib_update.setText(_translate("MainWindow", "Library Updater"))
        self.cb_repl_ex_files.setToolTip(_translate("MainWindow", "<html><head/><body><p>Whether files in the library should be replaced with the new files in the case that a file with a matching filename was found in the library.</p><p><span style=\" font-style:italic;\">Note</span>: Be careful when using this option as it <span style=\" font-weight:700;\">cannot be undone</span></p></body></html>"))
        self.cb_repl_ex_files.setText(_translate("MainWindow", "Replace existing files in the library"))
        self.rbtn_search.setToolTip(_translate("MainWindow", "<html><head/><body><p>Search for the closest match of the filename of the new files in the track library directory.</p><p><span style=\" font-style:italic;\">Note: </span>This mode could be used to replace files which already exist in the library, but are damaged or of lower audio quality. In addition, it can be used to check whether the new tracks already exist in the library</p></body></html>"))
        self.rbtn_search.setText(_translate("MainWindow", "Search filename in library"))
        self.rbtn_meta.setToolTip(_translate("MainWindow", "<html><head/><body><p>Determine the goal folder based on the genre metadata.</p><p>For this option to work, the genre should correspond to a folder substructure in the track library, with subfolders separated by hyphens. </p><p>E.g. the genre &quot;<span style=\" font-style:italic;\">Trance - Bounce - Some subcategory</span>&quot; would correspond to a folder path &quot;<span style=\" font-style:italic;\">&lt;path of track library&gt;/Trance/Bounce/Some subcategory</span>&quot;.</p></body></html>"))
        self.rbtn_meta.setText(_translate("MainWindow", "Use genre metadata"))
        self.btn_read_lib_2.setToolTip(_translate("MainWindow", "Read the files from the track library (excluding files from the excluded folders)"))
        self.btn_read_lib_2.setText(_translate("MainWindow", "Read library"))
        self.btn_goalfld_search.setToolTip(_translate("MainWindow", "<html><head/><body><p>Search the destination location of the new files in the track library based on the mode selected below.</p><p>This feature only finds the location the files should go. It <span style=\" font-weight:700;\">does not </span>move the files. The user has the option to modifiy the found destination location in the new files table.</p></body></html>"))
        self.btn_goalfld_search.setText(_translate("MainWindow", "Search goal folder in Library"))
        self.rbtn_deldoub_lib.setToolTip(_translate("MainWindow", "<html><head/><body><p>Determine the goal folder based on the genre metadata.</p><p>For this option to work, the genre should correspond to a folder substructure in the track library, with subfolders separated by hyphens. </p><p>E.g. the genre &quot;<span style=\" font-style:italic;\">Trance - Bounce - Some subcategory</span>&quot; would correspond to a folder path &quot;<span style=\" font-style:italic;\">&lt;path of track library&gt;/Trance/Bounce/Some subcategory</span>&quot;.</p></body></html>"))
        self.rbtn_deldoub_lib.setText(_translate("MainWindow", "Delete from library"))
        self.rbtn_deldoub_nf.setToolTip(_translate("MainWindow", "<html><head/><body><p>Search for the closest match of the filename of the new files in the track library directory.</p><p><span style=\" font-style:italic;\">Note: </span>This mode could be used to replace files which already exist in the library, but are damaged or of lower audio quality. In addition, it can be used to check whether the new tracks already exist in the library</p></body></html>"))
        self.rbtn_deldoub_nf.setText(_translate("MainWindow", "Delete from new files"))
        self.rbtn_deldoub_indiv.setToolTip(_translate("MainWindow", "<html><head/><body><p>Search for the closest match of the filename of the new files in the track library directory.</p><p><span style=\" font-style:italic;\">Note: </span>This mode could be used to replace files which already exist in the library, but are damaged or of lower audio quality. In addition, it can be used to check whether the new tracks already exist in the library</p></body></html>"))
        self.rbtn_deldoub_indiv.setText(_translate("MainWindow", "Ask individually"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_libup), _translate("MainWindow", "Lib Updater"))
        self.lbl_msg.setText(_translate("MainWindow", "Messages"))
        self.menuSettings.setTitle(_translate("MainWindow", "Settings"))
        self.actionrfsey.setText(_translate("MainWindow", "rfsey"))
        self.SettingsImport.setText(_translate("MainWindow", "Import"))
        self.SettingsImport.setToolTip(_translate("MainWindow", "Import a settings file"))
        self.SettingsChange.setText(_translate("MainWindow", "Change"))
        self.SettingsChange.setToolTip(_translate("MainWindow", "Open the settings window"))
        self.actionEdit_Download_History.setText(_translate("MainWindow", "Edit Download History"))
        self.EditHist.setText(_translate("MainWindow", "DL History Editor"))
        self.EditHist.setToolTip(_translate("MainWindow", "Open the download history editor"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
